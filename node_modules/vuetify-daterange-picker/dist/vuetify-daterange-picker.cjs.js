/*!
 * vuetify-daterange-picker v2.6.1
 * (c) 2018-present Praveen Puglia <praveenpuglia@gmail.com>
 */
'use strict';

var dateFns = require('date-fns');

var DateRange = { render: function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "date-range" }, [!_vm.noPresets ? _c('div', { staticClass: "date-range__presets" }, [_c('v-list', { attrs: { "dark": _vm.dark } }, [_c('v-subheader', [_vm._v(_vm._s(_vm.labels.preset))]), _vm._v(" "), _vm._l(_vm.presets, function (preset, index) {
      return _c('v-list-tile', { key: index, on: { "click": function ($event) {
            _vm.onPresetSelect(index);
          } }, model: { value: _vm.isPresetActive[index], callback: function ($$v) {
            _vm.$set(_vm.isPresetActive, index, $$v);
          }, expression: "isPresetActive[index]" } }, [_c('v-list-tile-content', [_vm._v(" " + _vm._s(preset.label) + " ")])], 1);
    })], 2)], 1) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "date-range__pickers" }, [_c('div', { staticClass: "date-range__picker date-range__pickers--start" }, [_c('v-text-field', { staticClass: "date-range__pickers-input", attrs: { "label": ((_vm.labels.start) + "(" + (_vm.format) + ")"), "name": "startDate", "prepend-icon": _vm.prependIcon, "readonly": "readonly" }, model: { value: _vm.formattedStartDate, callback: function ($$v) {
          _vm.formattedStartDate = $$v;
        }, expression: "formattedStartDate" } }), _vm._v(" "), _c('v-date-picker', { attrs: { "next-icon": _vm.nextIcon, "prev-icon": _vm.prevIcon, "dark": _vm.dark, "events": _vm.highlightRange ? _vm.dateRange.dates : _vm.events, "event-color": _vm.highlightRange ? _vm.dateRange.colors : _vm.eventColor, "min": _vm.options.minDate, "max": _vm.endDate, "locale": _vm.locale, "first-day-of-week": _vm.firstDayOfWeek, "no-title": "" }, on: { "change": _vm.onDateRangeChange }, model: { value: _vm.startDate, callback: function ($$v) {
          _vm.startDate = $$v;
        }, expression: "startDate" } })], 1), _vm._v(" "), _c('div', { staticClass: "date-range__picker date-range__picker--end" }, [_c('v-text-field', { staticClass: "date-range__pickers-input", attrs: { "label": ((_vm.labels.end) + "(" + (_vm.format) + ")"), "name": "endDate", "readonly": "readonly" }, model: { value: _vm.formattedEndDate, callback: function ($$v) {
          _vm.formattedEndDate = $$v;
        }, expression: "formattedEndDate" } }), _vm._v(" "), _c('v-date-picker', { attrs: { "next-icon": _vm.nextIcon, "prev-icon": _vm.prevIcon, "dark": _vm.dark, "min": _vm.startDate, "max": _vm.maxDate, "events": _vm.highlightRange ? _vm.dateRange.dates : _vm.events, "event-color": _vm.highlightRange ? _vm.dateRange.colors : _vm.eventColor, "locale": _vm.locale, "first-day-of-week": _vm.firstDayOfWeek, "no-title": "" }, on: { "change": _vm.onDateRangeChange }, model: { value: _vm.endDate, callback: function ($$v) {
          _vm.endDate = $$v;
        }, expression: "endDate" } })], 1)])]);
  }, staticRenderFns: [], _scopeId: 'data-v-a39c29f4',
  name: 'v-daterange',
  props: {
    options: {
      type: Object,
      required: true
    },
    noPresets: {
      type: Boolean,
      default: false
    },
    dark: {
      type: Boolean,
      default: false
    },
    prependIcon: {
      type: String,
      default: 'event'
    },
    nextIcon: {
      type: String,
      default: 'chevron_right'
    },
    prevIcon: {
      type: String,
      default: 'chevron_left'
    },
    labels: {
      type: Object,
      default: function default$1() {
        return {
          start: 'Start Date',
          end: 'End Date',
          preset: 'Presets'
        };
      }
    },
    events: {
      type: [Array, Object, Function],
      default: function () { return null; }
    },
    eventColor: {
      type: [String, Function, Object],
      default: 'warning'
    },
    highlightRange: {
      type: Boolean,
      default: true
    },
    highlightColors: {
      type: String,
      default: ''
    },
    locale: {
      type: String,
      default: 'en-us'
    },
    firstDayOfWeek: {
      type: Number,
      default: 0
    }
  },
  data: function data() {
    return {
      startDate: this.options.startDate,
      endDate: this.options.endDate,
      format: this.options.format,
      presets: this.options.presets,
      dateRange: {
        dates: [],
        colors: {}
      }
    };
  },
  computed: {
    formattedStartDate: function formattedStartDate() {
      return this.startDate ? dateFns.format(dateFns.parse(this.startDate), this.format) : '';
    },
    formattedEndDate: function formattedEndDate() {
      return this.endDate ? dateFns.format(dateFns.parse(this.endDate), this.format) : '';
    },
    highlightColorClasses: function highlightColorClasses() {
      if (this.highlightColors) {
        return this.highlightColors;
      }
      return this.dark ? 'blue-grey darken-1' : 'blue lighten-5';
    },
    isPresetActive: function isPresetActive() {
      var this$1 = this;

      return this.presets.map(function (preset) { return preset.range[0] === this$1.startDate && preset.range[1] === this$1.endDate; });
    },
    today: function today() {
      return dateFns.format(new Date(), 'YYYY-MM-DD');
    },
    maxDate: function maxDate() {
      return this.options.maxDate || this.today;
    }
  },
  watch: {
    startDate: function startDate() {
      this.onDateRangeChange();
    },
    endDate: function endDate() {
      this.onDateRangeChange();
    }
  },
  mounted: function mounted() {
    if (this.highlightRange) { this.setInRangeData(); }
  },
  methods: {
    onPresetSelect: function onPresetSelect(presetIndex) {
      this.startDate = this.presets[presetIndex].range[0];
      this.endDate = this.presets[presetIndex].range[1];
    },
    onDateRangeChange: function onDateRangeChange() {
      if (this.highlightRange) { this.setInRangeData(); }
      this.$emit('input', [this.startDate, this.endDate]);
    },
    setInRangeData: function setInRangeData() {
      var this$1 = this;

      var inRangeData = {
        dates: [],
        colors: {}
      };

      if (this.highlightRange) {
        var startDate = dateFns.parse(this.startDate);
        var endDate = dateFns.parse(this.endDate);
        var diffDays = (endDate - startDate) / (1000 * 3600 * 24);

        for (var i = 0; i <= diffDays; i += 1) {
          var date = this$1.addDays(startDate.toDateString(), i);
          inRangeData.dates.push(date);
          inRangeData.colors[date] = "date-range__date-in-range " + (this$1.highlightColorClasses);

          if (i === 0) { inRangeData.colors[date] += ' date-range__range-start'; }
          if (i === diffDays) { inRangeData.colors[date] += ' date-range__range-end'; }
        }
      }

      this.dateRange = inRangeData;
    },
    addDays: function addDays(date, days) {
      var result = dateFns.parse(date);
      result.setDate(result.getDate() + days);
      return dateFns.format(result, 'YYYY-MM-DD');
    }
  }
};

var VDateRange = {
  install: function install(Vue) {
    Vue.component(DateRange.name, DateRange);
  }
};

module.exports = VDateRange;
